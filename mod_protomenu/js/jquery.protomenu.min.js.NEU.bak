/**
 * @package        HEAD. Protomenü
 * @version        4.0.0
 * 
 * @author         Carsten Ruppert <webmaster@headmarketing.de>
 * @date           2018-10-26
 * @link           https://www.headmarketing.de
 * @copyright      Copyright © 2018 HEAD. MARKETING GmbH All Rights Reserved
 * @license        http://www.gnu.org/licenses/gpl-2.0.html GNU/GPL
 */
'use strict';
(function($) {

	$.Protomenu = function(options, node)
	{
		this.menu = $(node);
		this.menu.data('protomenu', this);

		this._init(options);
	};

	$.Protomenu.defaults = {
		plugins : []
	};

	$.Protomenu.Plugins = [];

	$.Protomenu.prototype = {

		_init : function(options)
		{
			this.opt 		= $.extend({}, $.Protomenu.defaults, options);
			this.triggers 	= $('[data-ptm-item]:has([data-ptm-child])', this.menu).not(':has( > [data-ptm-static-child])');
			
			// Verfügt das Anzeigegerät über Touch-Punkte?
			if(this.isTouchEnabledDevice())
			{
				this.menu.addClass('touch-enabled');
				this.bindTappingEvents();
			}
			//this.initPlugins();
		},

		/*
		initPlugins : function()
		{
			this.opt.plugins = this.opt.plugins.concat($.Protomenu.Plugins);
			this.opt.plugins = this.opt.plugins.filter( function(value, index, self){return self.indexOf(value) === index;}); // https://stackoverflow.com/questions/1960473/get-all-unique-values-in-an-array-remove-duplicates
			//this.opt.plugins = this.opt.plugins.filter( (value, index, self) => {return self.indexOf(value) === index;});

			if( this.opt.plugins.length > 0 )
			{
				for( var i = 0, len = this.opt.plugins.length; i < len; i++ )
				{
					this[this.opt.plugins[i]] = new $[this.opt.plugins[i]](this); // = z.B.: this.ProtomenuBackdrop = new $.ProtomenuBackdrop(this);
				}
			}
		},
		*/

		isTouchEnabledDevice : function()
		{
			if(('ontouchstart' in window) 
			|| (navigator.maxTouchPoints > 0) 
			|| (navigator.msMaxTouchPoints > 0))
			{
				return true;
			}
			return false;
		},

		bindTappingEvents : function() 
		{
			this.currentTrigger = [null]; // Es wird auf this.currentTrigger[0] geprüft, das muss ein Array sein!
			this.touchCaptured  = false;

			for(let i = 0, len = this.triggers.length; i < len; i++)
			{
				/* 
					onTouchstart abfangen – So wird ermittelt, ob es sich um ein Gerät mit Touch-Steuerung handelt.
					Weil nur onClick den :hover an dem Element auslöst, darf hier die Event-Kette nicht abgebrochen werden.
					:hover kann nicht per Code ausgelöst werden (siehe Trusted Events für weitere Infos).
				*/
				this.triggers.eq(i).on('touchstart', function()
				{
					this.touchCaptured = true;
				}.bind(this));

				/*
					Im onClick, welcher nach onTouchstart ausgelöst wird, prüfen wir ob per Touch geklickt wurde, wenn ja wird der Navigationvorgang abgebrochen.
					Es sei denn, der angetippte Menüeintrag wurde schon einmal angetippt, dann wird der Navigationsvorgang durchgeführt.
				*/
				this.triggers.eq(i).on('click', function(ev)
				{
					if(this.touchCaptured) 
					{
						let trigger = $(ev.delegateTarget);
						if( trigger[0] != this.currentTrigger[0])
						{
							this.currentTrigger = trigger;
							ev.preventDefault();
						}
						this.touchCaptured = false;
					}
				}.bind(this));
			}
			
			// Reset this.currentTrigger, wenn im DOM außerhalb von this.currentTrigger geklickt wird.
			$(document).on('click.ptmenu', function(ev) 
			{
				let reset 	= true,
					parents = $(ev.target).parents();

				// Wenn das angeklickte DOM-Element ein Nachfahre von this.currentTrigger ist, wird currentTrigger nicht zurückgesetzt.
				for(let i = 0, len = parents.length; i < len; i++)
				{
					if(parents.eq(i)[0] === this.currentTrigger[0])
					{
						reset = false;
					}
				}

				if(reset)
				{
					this.currentTrigger = [null];
				}
			}.bind(this));
		}
	}

	$.fn.protomenu = function(options)
	{
		let self = $(this).data('protomenu');

		if( self === undefined )
		{
			self = new $.Protomenu(options, this);
		}
		return self;
	}




	//$.Protomenu.Plugins.push('ProtomenuTouch');

	$.ProtomenuTouch = function(parent) 
	{
		this.parent = parent;
		this._init();
	}
	$.ProtomenuTouch.prototype = {

		_init : function()
		{
			if(!('ontouchstart' in window) 
				|| (navigator.maxTouchPoints == 0) 
				|| (navigator.msMaxTouchPoints == 0))
			{
				return;
			}

			let item;
			for(let i = 0, len = this.parent.triggers.length; i < len; i++)
			{
				item = this.parent.triggers.eq(i);
			
				item.on('touchstart', function(ev) {
					if(this.hasClass('tapped'))
					{
						this.removeClass('tapped');
					}
					else
					{
						this.addClass('tapped');
					}
				}.bind(item));
			}
		}
	}

})(jQuery);